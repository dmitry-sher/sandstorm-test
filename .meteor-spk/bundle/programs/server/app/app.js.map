{"version":3,"sources":["meteor://ðŸ’»app/lib/common.js","meteor://ðŸ’»app/server/sandstorm.js"],"names":["module","export","isSandstorm","isItSandstorm","Meteor","settings","public","sandstorm","module1","check","watch","require","v","promisifyCb","cb","arg","Promise","resolve","reject","err","res","methods","dir","path","fs","files","readdir","dirFiles","Error","file","filePath","stat","stats","push","isDirectory","dirname","__dirname","modules","paths","forEach","toString","isServer","checkModule","Capnp","e","console","warn"],"mappings":"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","file":"/app.js","sourcesContent":["export function isSandstorm() {\n    const isItSandstorm = Meteor.settings && Meteor.settings.public &&\n            Meteor.settings.public.sandstorm\n    return isItSandstorm\n}\n","import { check } from 'meteor/check'\nimport { isSandstorm } from '../lib/common'\n\nfunction promisifyCb(cb, arg) {\n    // console.log('[promisifyCb] cb =', cb, ', arg = ', arg)\n    return new Promise((resolve, reject) => {\n        cb(arg, function(err, res) {\n            if (err) reject(err)\n            resolve(res)\n        })\n    })\n}\n\nMeteor.methods({\n    async dir(path = '/') {\n        const fs = require('fs');\n        \n        try {\n            const files = []\n            const dirFiles = await promisifyCb(fs.readdir, path)\n            if (!dirFiles) throw new Meteor.Error('no files')\n            // console.log('dirFiles = ', dirFiles)\n            for (let file of dirFiles) {\n                const filePath = path == '/' ? `/${file}` : `${path}/${file}`\n                try {\n                    const stats = await promisifyCb(fs.stat, filePath)\n                    files.push({file, isDirectory: stats.isDirectory()})\n                } catch (e) {\n                    files.push({ file, err: e })\n                }\n            }\n\n            const dirname = __dirname\n            const modules = ['capnp', 'isarray', 'test']\n            const paths = {}\n            modules.forEach(module => paths[module] = require.resolve(module))\n            return { files, dirname, paths }\n        } catch (e) {\n            throw new Meteor.Error('error', e.toString())\n        }\n    }\n})\nif (isSandstorm() && Meteor.isServer) {\n    // const dir = `${__dirname}/node_modules/capnp`\n    \n    function checkModule(dir) {\n        try {\n            const Capnp = require(dir)\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n    checkModule('../node_modules/capnp')\n    checkModule('../../node_modules/capnp')\n    checkModule('../../../node_modules/capnp')\n    checkModule('../../../../node_modules/capnp')\n}\n"]}